{"version":3,"sources":["components/Login.js","components/Canvas.js","components/GameSelect.js","components/DisplayContainer.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Login","handleSubmit","e","preventDefault","props","onLoginClicked","onLogin","onSetCurrentPlayer","state","currentPlayer","setSubmitted","setState","submitted","handleChange","target","id","value","name","this","loginClicked","onSubmit","type","placeholder","onChange","to","Component","forestHexes","Canvas","handleMouseMove","bind","handleClick","hexSize","hexOrigin","x","y","currentHex","q","r","s","playerPosition","greyHexes","blueHexes","playerTurn","phase","cubeNeighborsArray","infantryDistance","greyUnitHealth","blueUnitHealth","firingDistance","currentGame","clickCoordsHolder","previousPlayerPosition","hexParameters","getHexParameters","canvasSize","canvasWidth","canvasHeight","canvasHex","width","height","canvasCoordinates","getCanvasPosition","drawHexes","fetch","then","res","json","filter","nation","game_id","map","JSON","parse","coords","drawForestHexes","drawBlueUnitHexes","drawGreyUnitHexes","console","log","nextProps","nextState","getContext","clearRect","drawNeighborsMove","Hex","currentDistanceLine","i","length","drawHex","Point","positiveRow","hexWidth","hexHeight","vertDist","horizDist","hexToPixel","negativeRow","canvasID","center","lineColor","fillColor","start","getHexCornerCoord","end","fillHex","drawLine","greyCoordString","UNITSURL","method","headers","Accept","body","stringify","health","resp","Math","floor","status","angle_deg","angle_rad","PI","cos","sin","sqrt","rect","getBoundingClientRect","canvasPosition","left","right","top","bottom","h","p","size","origin","direction","a","b","cubeAdd","cubeDirection","cube","rx","round","ry","rz","x_diff","abs","y_diff","z_diff","dist","cubeDistance","arr","cubeRound","cubeLinearInt","concat","cubeSubtract","t","linearInt","color","ctx","beginPath","moveTo","strokeStyle","lineWidth","lineTo","stroke","closePath","c0","c1","c2","c3","c4","c5","fillStyle","globalAlpha","fill","fillText","item","getCubeNeighbor","push","formerPositionHolder","findInBlueHexes","findInGreyHexes","offsetX","pageX","offsetY","pageY","pixelToHex","fireDist","getDistanceLine","drawNeighborsClick","fetchNewUnitPosition","slice","ref","onMouseMove","onClick","React","GameSelect","games","gameSelectedID","gameSelected","gameArr","gameFilter","players","playerFilter","event","currentTarget","attributes","overlay","login","displayGames","d","idx","key","turn","game-id","DisplayContainer","exact","path","render","NavBar","handleLogout","onLogout","App","Boolean","window","location","hostname","match","ReactDOM","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b6725d8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nexport class Login extends Component {\n  // let { loginClicked, onLogin, login, onLoginClicked, onLogout, onSetCurrentPlayer } = this.props;\n  constructor() {\n    super();\n    this.state = {\n      currentPlayer: { name: \"\" },\n      submitted: false\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    // this.props.onSubmitNewPlayer(this.state.name);\n    this.props.onLoginClicked();\n    this.props.onLogin();\n    this.props.onSetCurrentPlayer(this.state.currentPlayer);\n    this.setSubmitted();\n  };\n\n  setSubmitted = () => {\n    this.setState({\n      ...this.state,\n      submitted: true\n    });\n  };\n\n  handleChange = e => {\n    this.setState({\n      ...this.state,\n      currentPlayer: {\n        ...this.state.currentPlayer,\n        [e.target.id]: e.target.value\n      }\n    });\n  };\n\n  render() {\n    let { loginClicked } = this.props;\n    if (loginClicked === true && this.state.submitted === false) {\n      return (\n        <div>\n          <h1>Login</h1>\n          <form onSubmit={e => this.handleSubmit(e)}>\n            <input\n              type=\"text\"\n              placeholder=\"Name\"\n              onChange={e => this.handleChange(e)}\n              id=\"name\"\n            />\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n          <button>Cancel</button>\n        </div>\n      );\n    } else if (this.state.submitted === true) {\n      return <Redirect to=\"/gameselect\" />;\n    } else {\n      return <></>;\n    }\n  }\n}\n\nexport default Login;\n","import React from \"react\";\n\nlet forestHexes = [\n  '{\"q\":-1,\"r\":-3,\"s\":4}',\n  '{\"q\":-1,\"r\":-2,\"s\":3}',\n  '{\"q\":0,\"r\":-2,\"s\":2}',\n  '{\"q\":1,\"r\":-3,\"s\":2}',\n  '{\"q\":1,\"r\":-2,\"s\":1}',\n  '{\"q\":3,\"r\":-3,\"s\":0}',\n  '{\"q\":3,\"r\":-2,\"s\":-1}',\n  '{\"q\":4,\"r\":-2,\"s\":2}',\n  '{\"q\":5,\"r\":-2,\"s\":-3}',\n  '{\"q\":8,\"r\":-3,\"s\":-5}',\n  '{\"q\":3,\"r\":0,\"s\":-3}',\n  '{\"q\":2,\"r\":1,\"s\":-3}',\n  '{\"q\":2,\"r\":2,\"s\":-4}',\n  '{\"q\":3,\"r\":1,\"s\":-4}',\n  '{\"q\":3,\"r\":2,\"s\":-5}',\n  '{\"q\":4,\"r\":1,\"s\":-5}',\n  '{\"q\":5,\"r\":0,\"s\":-5}',\n  '{\"q\":4,\"r\":2,\"s\":-6}',\n  '{\"q\":-1,\"r\":3,\"s\":-2}',\n  '{\"q\":0,\"r\":1,\"s\":-1}',\n  '{\"q\":-0,\"r\":0,\"s\":-0}',\n  '{\"q\":-1,\"r\":0,\"s\":1}',\n  '{\"q\":-1,\"r\":1,\"s\":0}',\n  '{\"q\":-2,\"r\":1,\"s\":1}',\n  '{\"q\":-3,\"r\":2,\"s\":1}',\n  '{\"q\":-5,\"r\":0,\"s\":5}'\n];\n\nlet UNITSURL = `http://localhost:3000/units`;\n\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      hexSize: 30,\n      hexOrigin: { x: 300, y: 250 },\n      currentHex: { q: 0, r: 0, s: 0, x: 0, y: 0 },\n      playerPosition: { q: 0, r: 0, s: 0, x: 0, y: 0 },\n      forestHexes: forestHexes,\n      greyHexes: [],\n      blueHexes: [],\n      playerTurn: 1,\n      phase: \"movement\",\n      cubeNeighborsArray: [],\n      infantryDistance: 6,\n      greyUnitHealth: 4,\n      blueUnitHealth: 4,\n      firingDistance: 0,\n      currentGame: 1,\n      clickCoordsHolder: [],\n      previousPlayerPosition: { q: 0, r: 0, s: 0 }\n    };\n  }\n\n  componentWillMount() {\n    let hexParameters = this.getHexParameters();\n    this.setState({\n      canvasSize: { canvasWidth: 680, canvasHeight: 500 },\n      hexParameters: hexParameters\n    });\n  }\n\n  componentDidMount() {\n    let { id } = this.props;\n    // console.log(this.props.id);\n    const { canvasWidth, canvasHeight } = this.state.canvasSize;\n    this.canvasHex.width = canvasWidth;\n    this.canvasHex.height = canvasHeight;\n    this.canvasCoordinates.width = canvasWidth;\n    this.canvasCoordinates.height = canvasHeight;\n    this.getCanvasPosition(this.canvasCoordinates);\n    this.drawHexes();\n\n    this.setState({\n      currentGame: id\n    });\n\n    fetch(\"http://localhost:3000/units\")\n      .then(res => res.json())\n      .then(json => {\n        this.setState(\n          {\n            greyHexes: json\n              .filter(\n                x =>\n                  x.nation == \"Confederate\" &&\n                  x.game_id == this.state.currentGame\n              )\n              .map(y => JSON.parse(y.coords)),\n            blueHexes: json\n              .filter(\n                x => x.nation == \"Union\" && x.game_id == this.state.currentGame\n              )\n              .map(y => JSON.parse(y.coords))\n          },\n          () => {\n            this.drawForestHexes();\n            this.drawBlueUnitHexes();\n            this.drawGreyUnitHexes();\n            console.log(this.state.currentGame);\n          }\n        );\n      });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.currentHex !== this.state.currentHex) {\n      const { q, r, s, x, y } = nextState.currentHex;\n      const { canvasWidth, canvasHeight } = this.state.canvasSize;\n      const ctx = this.canvasCoordinates.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      this.drawNeighborsMove(this.Hex(q, r, s));\n      let currentDistanceLine = nextState.currentDistanceLine;\n      if (currentDistanceLine != null) {\n        for (let i = 0; i <= currentDistanceLine.length - 2; i++) {\n          if (i == 0) {\n          } else {\n            this.drawHex(\n              this.canvasCoordinates,\n              this.Point(currentDistanceLine[i].x, currentDistanceLine[i].y),\n              \"lime\",\n              1,\n              \"orange\"\n            );\n          }\n        }\n      }\n      this.drawHex(this.canvasCoordinates, this.Point(x, y), \"lime\", 1, \"lime\");\n      return true;\n    }\n    return false;\n  }\n\n  drawHexes() {\n    const { canvasWidth, canvasHeight } = this.state.canvasSize;\n    const {\n      hexWidth,\n      hexHeight,\n      vertDist,\n      horizDist\n    } = this.state.hexParameters;\n    const hexOrigin = this.state.hexOrigin;\n    let positiveRow = 0;\n    for (let r = 0; r <= 4; r++) {\n      if (r % 2 == 0 && r !== 0) {\n        positiveRow++;\n      }\n      for (let q = -5; q <= 6; q++) {\n        const { x, y } = this.hexToPixel(this.Hex(q - positiveRow, r, -q - r));\n        this.drawHex(this.canvasHex, this.Point(x, y), \"black\", 1, \"grey\");\n      }\n    }\n\n    let negativeRow = 0;\n    for (let r = -1; r >= -4; r--) {\n      if (r % 2 !== 0) {\n        negativeRow++;\n      }\n      for (let q = -5; q <= 6; q++) {\n        const { x, y } = this.hexToPixel(this.Hex(q + negativeRow, r));\n\n        this.drawHex(this.canvasHex, this.Point(x, y), \"black\", 1, \"grey\");\n      }\n    }\n  }\n\n  drawHex(canvasID, center, lineColor, width, fillColor) {\n    for (let i = 0; i <= 5; i++) {\n      let start = this.getHexCornerCoord(center, i);\n      let end = this.getHexCornerCoord(center, i + 1);\n      this.fillHex(canvasID, center, fillColor);\n      this.drawLine(canvasID, start, end, lineColor, width);\n    }\n  }\n\n  drawForestHexes() {\n    this.state.forestHexes.map(i => {\n      const { q, r, s } = JSON.parse(i);\n      const { x, y } = this.hexToPixel(this.Hex(q, r, s));\n      this.drawHex(this.canvasHex, this.Point(x, y), 1, \"black\", \"green\");\n    });\n  }\n\n  drawGreyUnitHexes() {\n    this.state.greyHexes.map(i => {\n      const { q, r, s } = i;\n      const { x, y } = this.hexToPixel(this.Hex(q, r, s));\n      this.drawHex(this.canvasHex, this.Point(x, y), 1, \"black\", \"red\");\n    });\n  }\n\n  drawBlueUnitHexes() {\n    this.state.blueHexes.map(i => {\n      const { q, r, s } = i;\n      const { x, y } = this.hexToPixel(this.Hex(q, r, s));\n      this.drawHex(this.canvasHex, this.Point(x, y), 1, \"black\", \"blue\");\n    });\n  }\n\n  fetchNewUnitPosition(q, r, s) {\n    console.log(q, r, s);\n    let greyCoordString = `{\"q\":${q},\"r\":${r},\"s\":${s}}`;\n\n    fetch(UNITSURL + \"/\" + 3, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        name: \"1st Mississippi\",\n        coords: greyCoordString,\n        health: 4,\n        nation: \"Confederate\",\n        game_id: 1\n      })\n    }).then(function(resp) {\n      if (Math.floor(resp.status / 200) === 1) {\n        console.log(\"Great \");\n      } else {\n        console.log(\"ERROR\", resp);\n      }\n    });\n    console.log(\"here\");\n  }\n\n  getHexCornerCoord(center, i) {\n    let angle_deg = 60 * i + 30;\n    let angle_rad = (Math.PI / 180) * angle_deg;\n    let x = center.x + this.state.hexSize * Math.cos(angle_rad);\n    let y = center.y + this.state.hexSize * Math.sin(angle_rad);\n    return this.Point(x, y);\n  }\n\n  getHexParameters() {\n    let hexHeight = this.state.hexSize * 2;\n    let hexWidth = (Math.sqrt(3) / 2) * hexHeight;\n    let vertDist = (hexHeight * 3) / 4;\n    let horizDist = hexWidth;\n    return { hexWidth, hexHeight, vertDist, horizDist };\n  }\n\n  getCanvasPosition(canvasID) {\n    let rect = canvasID.getBoundingClientRect();\n    this.setState({\n      canvasPosition: {\n        left: rect.left,\n        right: rect.right,\n        top: rect.top,\n        bottom: rect.bottom\n      }\n    });\n  }\n\n  hexToPixel(h) {\n    let hexOrigin = this.state.hexOrigin;\n    let x = this.state.hexSize * Math.sqrt(3) * (h.q + h.r / 2) + hexOrigin.x;\n    let y = ((this.state.hexSize * 3) / 2) * h.r + hexOrigin.y;\n    return this.Point(x, y);\n  }\n\n  pixelToHex(p) {\n    let size = this.state.hexSize;\n    let origin = this.state.hexOrigin;\n    let q =\n      (((p.x - origin.x) * Math.sqrt(3)) / 3 - (p.y - origin.y) / 3) / size;\n    let r = ((p.y - origin.y) * 2) / 3 / size;\n    return this.Hex(q, r, -q - r);\n  }\n\n  cubeDirection(direction) {\n    const cubeDirections = [\n      this.Hex(1, 0, -1),\n      this.Hex(1, -1, 0),\n      this.Hex(0, -1, 1),\n      this.Hex(-1, 0, 1),\n      this.Hex(-1, 1, 0),\n      this.Hex(0, 1, -1)\n    ];\n    return cubeDirections[direction];\n  }\n\n  cubeAdd(a, b) {\n    return this.Hex(a.q + b.q, a.r + b.r, a.s + b.s);\n  }\n\n  cubeSubtract(a, b) {\n    return this.Hex(a.q - b.q, a.r - b.r, a.s - b.s);\n  }\n\n  getCubeNeighbor(h, direction) {\n    return this.cubeAdd(h, this.cubeDirection(direction));\n  }\n\n  cubeRound(cube) {\n    var rx = Math.round(cube.q);\n    var ry = Math.round(cube.r);\n    var rz = Math.round(cube.s);\n\n    var x_diff = Math.abs(rx - cube.q);\n    var y_diff = Math.abs(ry - cube.r);\n    var z_diff = Math.abs(rz - cube.s);\n\n    if (x_diff > y_diff && x_diff > z_diff) {\n      rx = -ry - rz;\n    } else if (y_diff > z_diff) {\n      ry = -rx - rz;\n    } else {\n      rz = -rx - ry;\n    }\n    return this.Hex(rx, ry, rz);\n  }\n\n  getDistanceLine(a, b) {\n    let dist = this.cubeDistance(a, b);\n    if (dist < this.state.infantryDistance) {\n      let arr = [];\n      for (let i = 0; i <= dist; i++) {\n        let center = this.hexToPixel(\n          this.cubeRound(this.cubeLinearInt(a, b, (1.0 / dist) * i))\n        );\n        arr = [].concat(arr, center);\n      }\n      this.setState({\n        currentDistanceLine: arr\n      });\n    }\n  }\n\n  cubeDistance(a, b) {\n    const { q, r, s } = this.cubeSubtract(a, b);\n    return (Math.abs(q) + Math.abs(r) + Math.abs(s)) / 2;\n  }\n\n  cubeLinearInt(a, b, t) {\n    return this.Hex(\n      this.linearInt(a.q, b.q, t),\n      this.linearInt(a.r, b.r, t),\n      this.linearInt(a.s, b.s, t)\n    );\n  }\n\n  linearInt(a, b, t) {\n    return a + (b - a) * t;\n  }\n\n  Point(x, y) {\n    return { x: x, y: y };\n  }\n\n  Hex(q, r, s) {\n    return { q: q, r: r, s: s };\n  }\n\n  drawLine(canvasID, start, end, color, width) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(start.x, start.y);\n    ctx.strokeStyle = color;\n    ctx.lineWidth = width;\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  fillHex(canvasID, center, fillColor) {\n    let c0 = this.getHexCornerCoord(center, 0);\n    let c1 = this.getHexCornerCoord(center, 1);\n    let c2 = this.getHexCornerCoord(center, 2);\n    let c3 = this.getHexCornerCoord(center, 3);\n    let c4 = this.getHexCornerCoord(center, 4);\n    let c5 = this.getHexCornerCoord(center, 5);\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.fillStyle = fillColor;\n    ctx.globalAlpha = 0.7;\n    ctx.moveTo(c0.x, c0.y);\n    ctx.lineTo(c1.x, c1.y);\n    ctx.lineTo(c2.x, c2.y);\n    ctx.lineTo(c3.x, c3.y);\n    ctx.lineTo(c4.x, c4.y);\n    ctx.lineTo(c5.x, c5.y);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  drawHexCoordinates(canvasID, center, h) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.fillText(h.q, center.x + 6, center.y);\n    ctx.fillText(h.r, center.x - 3, center.y + 15);\n    ctx.fillText(h.s, center.x - 12, center.y);\n  }\n\n  findInBlueHexes(q, r, s) {\n    return this.state.blueHexes.filter(item => {\n      return item.q === q && item.r === r && item.s === s;\n    });\n  }\n\n  findInGreyHexes(q, r, s) {\n    return this.state.greyHexes.filter(item => {\n      return item.q === q && item.r === r && item.s === s;\n    });\n  }\n\n  drawNeighborsClick(h) {\n    const { canvasWidth, canvasHeight } = this.state.canvasSize;\n    const { hexWidth, hexHeight } = this.state.hexParameters;\n    let cubeNeighborsArray = [];\n\n    for (let i = 0; i <= 5; i++) {\n      const { q, r, s } = this.getCubeNeighbor(this.Hex(h.q, h.r, h.s), i);\n      const { x, y } = this.hexToPixel(this.Hex(q, r, s));\n      if (\n        x > hexWidth / 2 &&\n        x < canvasWidth - hexWidth / 2 &&\n        y > hexHeight / 2 &&\n        y < canvasHeight - hexHeight / 2\n      ) {\n        cubeNeighborsArray.push([q, r, s]);\n        this.setState(\n          {\n            cubeNeighborsArray: cubeNeighborsArray\n          },\n          () => {\n            console.log(this.state.cubeNeighborsArray);\n          }\n        );\n      }\n    }\n  }\n\n  drawNeighborsMove(h) {\n    const { canvasWidth, canvasHeight } = this.state.canvasSize;\n    const { hexWidth, hexHeight } = this.state.hexParameters;\n    // let cubeNeighborsArray = [];\n    let formerPositionHolder = { q: 0, r: 0, s: 0 };\n\n    for (let i = 0; i <= 5; i++) {\n      const { q, r, s } = this.getCubeNeighbor(this.Hex(h.q, h.r, h.s), i);\n      const { x, y } = this.hexToPixel(this.Hex(q, r, s));\n      if (\n        x > hexWidth / 2 &&\n        x < canvasWidth - hexWidth / 2 &&\n        y > hexHeight / 2 &&\n        y < canvasHeight - hexHeight / 2\n      ) {\n        // cubeNeighborsArray.push([q, r, s]);\n        // this.setState({\n        //   cubeNeighborsArray: cubeNeighborsArray\n        // });\n      }\n      if (this.findInBlueHexes(q, r, s).length !== 0) {\n        this.findInBlueHexes(q, r, s);\n        console.log(q, r, s);\n        if (\n          x > hexWidth / 2 &&\n          x < canvasWidth - hexWidth / 2 &&\n          y > hexHeight / 2 &&\n          y < canvasHeight - hexHeight / 2\n        ) {\n          formerPositionHolder.q = q;\n          formerPositionHolder.r = r;\n          formerPositionHolder.s = s;\n          this.setState({\n            previousPlayerPosition: formerPositionHolder\n          });\n          this.drawHex(this.canvasCoordinates, this.Point(x, y), \"blue\", 2);\n        }\n      }\n\n      if (this.findInGreyHexes(q, r, s).length !== 0) {\n        this.findInGreyHexes(q, r, s);\n        if (\n          x > hexWidth / 2 &&\n          x < canvasWidth - hexWidth / 2 &&\n          y > hexHeight / 2 &&\n          y < canvasHeight - hexHeight / 2\n        ) {\n          formerPositionHolder.q = q;\n          formerPositionHolder.r = r;\n          formerPositionHolder.s = s;\n          this.setState({\n            previousPlayerPosition: formerPositionHolder\n          });\n          this.drawHex(this.canvasCoordinates, this.Point(x, y), \"blue\", 2);\n        }\n      }\n    }\n  }\n\n  handleMouseMove(e) {\n    const { canvasWidth, canvasHeight } = this.state.canvasSize;\n    const { hexWidth, hexHeight } = this.state.hexParameters;\n    const { left, top } = this.state.canvasPosition;\n    let offsetX = e.pageX - left;\n    let offsetY = e.pageY - top;\n    const { q, r, s } = this.cubeRound(\n      this.pixelToHex(this.Point(offsetX, offsetY))\n    );\n    const { x, y } = this.hexToPixel(this.Hex(q, r, s));\n\n    if (this.state.phase === \"firing\") {\n      let playerPosition = this.state.playerPosition;\n      let fireDist = this.getDistanceLine(\n        this.Hex(playerPosition.q, playerPosition.r, playerPosition.s),\n        this.Hex(q, r, s)\n      );\n      this.setState({\n        firingDistance: fireDist\n      });\n    }\n\n    // console.log(this.Hex(q, r, s));\n\n    if (\n      x > hexWidth / 2 &&\n      x < canvasWidth - hexWidth / 2 &&\n      y > hexHeight / 2 &&\n      y < canvasHeight - hexHeight / 2\n    ) {\n      this.setState({\n        currentHex: { q, r, s, x, y }\n      });\n    }\n  }\n\n  handleClick(e) {\n    const { left, top } = this.state.canvasPosition;\n    let offsetX = e.pageX - left;\n    let offsetY = e.pageY - top;\n    const { q, r, s } = this.cubeRound(\n      this.pixelToHex(this.Point(offsetX, offsetY))\n    );\n    this.drawNeighborsClick(\n      this.Hex(\n        this.state.previousPlayerPosition.q,\n        this.state.previousPlayerPosition.r,\n        this.state.previousPlayerPosition.s\n      )\n    );\n    this.setState(\n      {\n        clickCoordsHolder: [\n          ...this.state.clickCoordsHolder,\n          this.state.currentHex\n        ]\n      },\n      () => {\n        if (this.state.phase == \"movement\") {\n          for (let i = 0; i <= this.state.cubeNeighborsArray.length; i++) {\n            if (this.state.cubeNeighborsArray[i] != null) {\n              if (\n                this.state.currentHex.q ===\n                  this.state.cubeNeighborsArray[i][0] &&\n                this.state.currentHex.r ===\n                  this.state.cubeNeighborsArray[i][1] &&\n                this.state.currentHex.s === this.state.cubeNeighborsArray[i][2]\n              ) {\n                this.fetchNewUnitPosition(q, r, s);\n                console.log(this.state.currentHex);\n                console.log(this.state.cubeNeighborsArray[i]);\n                console.log(this.state.clickCoordsHolder.slice(-1)[0]);\n              }\n            }\n          }\n        }\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas ref={canvasHex => (this.canvasHex = canvasHex)}> </canvas>\n        {/* prettier-ignore */}\n        <canvas ref={canvasCoordinates => (this.canvasCoordinates = canvasCoordinates)} onMouseMove={this.handleMouseMove} onClick={this.handleClick}> </canvas>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Canvas from \"./Canvas\";\n\nexport class GameSelect extends Component {\n  // let { currentPlayer, login } = this.props;\n  constructor() {\n    super();\n    this.state = {\n      currentPlayer: { name: \"\" },\n      games: [],\n      gameSelectedID: \"none\",\n      gameSelected: false\n    };\n  }\n\n  componentWillMount() {\n    this.setState({\n      ...this.state,\n      currentPlayer: {\n        ...this.state.currentPlayer,\n        name: this.props.currentPlayer.name\n      }\n    });\n  }\n\n  componentDidMount() {\n    console.log(this.state.currentPlayer.name);\n    let gameArr = [];\n    fetch(\"http://localhost:3000/games\")\n      .then(res => res.json())\n      .then(json => {\n        let gameFilter = json.filter(x => x.players).map(y => y.players);\n\n        for (let i = 0; i <= gameFilter.length - 1; i++) {\n          let gameFilterHolder = gameFilter[i];\n          let playerFilter = gameFilterHolder\n            .filter(a => a.name)\n            .map(b => b.name);\n\n          if (playerFilter[0] === this.state.currentPlayer.name) {\n            gameArr.push(json[i]);\n          } else if (playerFilter[1] === this.state.currentPlayer.name) {\n            gameArr.push(json[i]);\n          }\n        }\n\n        this.setState({\n          games: gameArr\n        });\n        console.log(this.state.games);\n      });\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    // console.log(event);\n    let id = event.currentTarget.attributes[\"game-id\"].value;\n    console.log(id);\n    this.setState({\n      ...this.state,\n      gameSelectedID: id,\n      gameSelected: true\n    });\n  }\n\n  render() {\n    console.log(this.state.gameSelectedID);\n   let overlay =\n      this.state.gameSelectedID !== \"none\" ? (\n        <Canvas id={this.state.gameSelectedID} />\n      ) : null;\n    if (this.props.login === true && this.state.gameSelected === false) {\n      let displayGames = this.state.games;\n      return (\n        <ol>\n          {overlay}\n          Games Name-Turn-Phase\n          {displayGames.map(\n            function(d, idx) {\n              return (\n                <li key={idx}>\n                  {d.name}\n                  {\" \" + d.turn}\n                  {\" \" + d.phase}\n                  <button onClick={e => this.handleClick(e)} game-id={d.id}>\n                    select\n                  </button>\n                </li>\n              );\n            }.bind(this)\n          )}\n        </ol>\n      );\n    } else if (this.state.gameSelected === true) {\n      return <ol>{overlay}</ol>;\n    } else {\n      return <Redirect to=\"/\" />;\n    }\n  }\n}\n\nexport default GameSelect;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport GameSelect from \"./GameSelect\";\n\nexport class DisplayContainer extends Component {\n  // let {\n  //     loginClicked,\n  //     onLogin,\n  //     login,\n  //     onLoginClicked,\n  //     onLogout,\n  //     onSetCurrentPlayer,\n  //     currentPlayer\n  // //   } = this.props;\n  render() {\n    let {\n      loginClicked,\n      onLoginClicked,\n      onSetCurrentPlayer,\n      onLogin,\n      currentPlayer,\n      login\n    } = this.props;\n\n    return (\n      <div>\n        <Router>\n          <Route\n            exact\n            path=\"/login\"\n            render={() => (\n              <Login\n                loginClicked={loginClicked}\n                onLoginClicked={onLoginClicked}\n                onSetCurrentPlayer={onSetCurrentPlayer}\n                onLogin={onLogin}\n              />\n            )}\n          />\n          <Route\n            exact\n            path=\"/gameselect\"\n            render={() => (\n              <GameSelect currentPlayer={currentPlayer} login={login} />\n            )}\n          />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default DisplayContainer;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport class NavBar extends Component {\n  // let { loginClicked, onLogin, login, onLoginClicked, onLogout } = this.props;\n\n\n  handleClick = () => {\n    this.props.onLoginClicked();\n  };\n\n  handleLogout = () => {\n    this.props.onLogout();\n  };\n\n  render() {\n    let { login } = this.props;\n\n    if (login === false) {\n      return (\n        <>\n          <Link to=\"/login\">\n            <button onClick={this.handleClick}>Login</button>\n          </Link>\n          <Link to=\"/signup\">\n            <button>Sign Up</button>\n          </Link>\n        </>\n      );\n    }\n    return (\n      <div>\n        <button onClick={this.handleLogout}>Logout</button>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport DisplayContainer from \"./components/DisplayContainer\";\nimport NavBar from \"./components/NavBar\";\n// import '../styles/index.scss'\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loginClicked: false,\n      login: false,\n      currentPlayer: {}\n    };\n  }\n\n  onLogin = () => {\n    this.setState({\n      login: true\n    });\n  };\n\n  onSetCurrentPlayer = currentPlayer => {\n    this.setState({\n      currentPlayer: currentPlayer\n    });\n  };\n\n  onLoginClicked = () => {\n    this.setState({\n      loginClicked: !this.state.loginClicked\n    });\n  };\n\n  onLogout = () => {\n    this.setState({\n      loginClicked: false,\n      login: false\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <NavBar\n          loginClicked={this.state.loginClicked}\n          onLogin={this.onLogin}\n          onLoginClicked={this.onLoginClicked}\n          login={this.state.login}\n          onLogout={this.onLogout}\n          currentPlayer={this.state.currentPlayer}\n        />\n        <DisplayContainer\n          loginClicked={this.state.loginClicked}\n          onLogin={this.onLogin}\n          onLoginClicked={this.onLoginClicked}\n          login={this.state.login}\n          onLogout={this.onLogout}\n          onSetCurrentPlayer={this.onSetCurrentPlayer}\n          currentPlayer={this.state.currentPlayer}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <Route path=\"/\" component={App} />{\" \"}\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}